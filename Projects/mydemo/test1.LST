C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE TEST1
OBJECT MODULE PLACED IN test1.OBJ
COMPILER INVOKED BY: D:\C51\BIN\C51.EXE test1.c BROWSE INCDIR(..\..\demos) DEBUG OBJECTEXTEND

line level    source

   1          //==========头文件=========
   2          #include <STC12C5A.h>
*** WARNING C318 IN LINE 2 OF test1.c: can't open file 'STC12C5A.h'
   3          #include <absacc.h>
   4          #include <intrins.h>
   5          #include <math.h>
   6          //=========================
   7          
   8          //===============宏定义======================
   9          #define DA_CH1 XBYTE[0x4000] // DA显示通道CH1
  10          #define DA_CH2 XBYTE[0x2000] // DA显示通道CH2
  11          #define MEMO_LEN        8000 // 回放显示存储长度(BYTE)
  12          #define WIN_SIZE        8
  13          #define AD_LEN 250
  14          #define SIN 1// 正弦波
  15          #define TRI 2// 三角波
  16          #define REC     3// 方波
  17          #define SAW 4// 锯齿波
  18          #define PI 3.1415926535          // 数学常数Π
  19          //===========================================
  20          
  21          //============管脚定义================
  22          //---------数码管连接芯片74CH565
  23          sbit D_SER = P1 ^ 0;
*** ERROR C202 IN LINE 23 OF TEST1.C: 'P1': undefined identifier
  24          sbit D_SRCLK = P1 ^ 1;
*** ERROR C202 IN LINE 24 OF TEST1.C: 'P1': undefined identifier
  25          sbit D_RCLK = P1 ^ 2;
*** ERROR C202 IN LINE 25 OF TEST1.C: 'P1': undefined identifier
  26          //---------键盘行扫描
  27          sbit KEY1 = P3 ^ 5;
*** ERROR C202 IN LINE 27 OF TEST1.C: 'P3': undefined identifier
  28          sbit KEY2 = P3 ^ 4;
*** ERROR C202 IN LINE 28 OF TEST1.C: 'P3': undefined identifier
  29          //===================================
  30          
  31          //============函数声明===============
  32          //void ad_delay();                // 4个nop
  33          //void ad_get();                  // ad采样
  34          void ad_save();                 // A/D采样值存储
  35          void ad_measure();                              // A/D测量
  36          void amp_measure();                             // 幅值检测
  37          void da_display();              // D/A显示
  38          void da_generator();                    // 信号发生器
  39          void da_process();                              // 处理[0,255]内的待显示D/A输出值
  40          void dsptask();                 // 数码管显示函数
  41          void dspbuf_measure();                  // 模式3，数码管显示缓存区为当前测量值
  42          void fdisp(unsigned char n,unsigned char m);// 单个数码管显示                           
  43          //n为数码管显示的数字 m为数码管位选     
  44          unsigned char GetADC();         // A/D采样（单次）
  45          void init_ad();                 // 内部A/D寄存器初始化
  46          void init_timer0();             // 定时器0初始化
  47          void init_special_interrupts(); // 中断初始化
  48          //void key_scan();                              // 按键扫描
  49          void key_service();                             // 按键扫描
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 2   

  50          void mode_select();                         // 模式选择，修改对应数码管缓存区
  51          //void memo_increment();                        // 存储读取位置更改 
  52          //--模式1：波形实时显示模式
  53          //---------CH1: 采样实时输出，同时存储输入
  54          //---------CH2: 信号发生器      正弦波|三角波|方波|锯齿波                                               
  55          //--模式2：波形回放显示模式                                                                                                                     
  56          //---------CH1: 采样实时输出
  57          //---------CH2：输出模式1中存储的信号的波形                                                                                                                             
  58          //--模式3：测量模式
  59          //--模式4：调幅、调频模式
  60          //---------CH1: 采样实时输出
  61          //---------CH2: 信号发生器      正弦波|三角波|方波|锯齿波
  62          
  63          //===============全局变量声明===========================
  64          unsigned char 
  65          dspbuf[4] = {    // 数码管显示缓存
  66              0x11, 0x11, 0x11, 0x11
  67          }, 
  68          dspchar[10] = {  // 数码管字符表0-9
  69                  0x11,0x7d,0x23,0x29,
  70                  0x4d,0x89,0x81,0x3d,
  71                  0x01,0x09       
  72          },
  73          /*
  74                          case 0: c = 0x11; break;
  75                          case 1: c = 0x7d; break;
  76                          case 2: c = 0x23; break;
  77                          case 3: c = 0x29; break;
  78                          case 4: c = 0x4d; break;
  79                          case 5: c = 0x89; break;
  80                          case 6: c = 0x81; break;
  81                          case 7: c = 0x3d; break;
  82                          case 8: c = 0x01; break;
  83                          case 9: c = 0x09; break;
  84                          default:c = 0xff; break;
  85          
  86          keysta[8] = {    // 按键状态，0-弹起，1-按下
  87                  0,0,0,0,
  88                  0,0,0,0
  89          },
  90          backup[8] = {    // 按键值备份，保存前一次的值
  91                  0,0,0,0,
  92                  0,0,0,0
  93          },
  94          keybuf[8] = {    // 按键扫描缓冲区
  95                  0x00,0x00,0x00,0x00,
  96                  0x00,0x00,0x00,0x00     
  97          },*/
  98              sel = 0,            // 数码管位选
  99              key_sta = 0;        // 按键状态
 100          unsigned char xdata
 101              ad_memo[MEMO_LEN];  // A/D采集信号存储区
 102          unsigned char
 103                  amp_modi = 0,  // 调幅标志
 104                  fre_modi = 0,  // 调频标志
 105                  ad_max = 128,  // 测量信号当前最大值
 106                  ad_min = 128,  // 测量信号当前最小值
 107                  ad_count = 0,  // A/D采样计数
 108              ad_result = 128, // A/D单次采集信号结果
 109                  dag_p = 0,         // 信号发生器指针
 110                  da_result = 0, // 信号发生器单次产生的数字信号
 111                  flag_amp = 0,  // 数码管显示幅值
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 3   

 112                  flag_fre = 0,  // 数码管显示频率标志
 113                  key_col = 0,   // 按键扫描当前列
 114                  key_num = 0,   // 按键序号
 115                  memo_p = 0,        // A/D采集存储区指针
 116                  mode = 0,          // 模式选择
 117                  review_p = 0,  // D/A回放显示指针
 118                  rec_count = 0, // 方波信号发生计数
 119                  saw_value = 64,// 锯齿波信号
 120                  rec_value = 64,// 方波信号
 121                  tri_value = 64,// 三角波信号
 122                  tri_flag = 1,  // 三角波幅值递增递减标志
 123                  //volt_max = 192,// 电压最大值
 124                  //volt_min = 64, // 电压最小值
 125                  wave_sel = 0,  // 信号发生器波形选择
 126                  i = 0,             // 按键扫描位选
 127                  fre_p1 = 1,        // 频率测量指针1 
 128                  fre_p2 = 1,        // 频率测量指针2
 129                  amp_p1 = 129,  // 频率测量指针
 130                  amp_p2 = 129,  // 频率测量指针
 131                  key_p = 0;         // 按键扫描缓冲区指针
 132          unsigned int
 133                  //fre_es = 0,    // 测量的频率
 134                  fre_count = 0, // 幅值测量计数
 135                  fre_sum = 0,   // 频率测量累加
 136                  time_count = 0,// 测量时间计数
 137                  angle = 0,         // 正弦波角度，角度值，[0,360]
 138                  da_count = 0,  // 信号发生器定时计数
 139                  da_index = 2,// 调幅参数
 140              clocktime = 0, //
 141                  gen_count = 4; // 信号发生器频率控制
 142                  
 143          float 
 144                  sinAngle = 0.0f,  // 正弦波角度，弧度制，[-1,1] 
 145                  fre_es = 0.0f,    // 测量的频率
 146                  amp_es = 0.0f;    // 幅值测量值，弧度制，[-5,5]
 147          
 148              
 149          
 150          //======================================================
 151          
 152          //==============函数体===============
 153          void main()
 154          {                                                                                                                                                                                                                                                                                                   
 155   1          init_timer0();
 156   1          init_special_interrupts();
 157   1          init_ad();
 158   1          while (1)
 159   1          {
 160   2              
 161   2                      if(key_sta & 0x01){//key_sta.0 = 0x01? key_sta.0 = 1检测到按键按下
 162   3                              mode_select();
 163   3                              key_sta = key_sta & 0xfe;//key_sta.0 = 0,按键弹起，等待下一次检测到按下
 164   3                      }
 165   2          }
 166   1      }
 167          void interrupt_timer0() interrupt 1 // 定时器0中断处理
 168          {
 169   1              EA = 0;
*** ERROR C202 IN LINE 169 OF TEST1.C: 'EA': undefined identifier
 170   1              ad_result = GetADC();// 单次采样                
 171   1      
 172   1              if(mode == 1){          // CH1：实时采样并存储 CH2: 信号发生器
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 4   

 173   2                      // 信号发生
 174   2                      da_count++;
 175   2                      if(da_count >= gen_count){ // gen_count = 4时，每隔1ms输出一次D/A
 176   3                              da_count = 0;
 177   3                              da_generator();
 178   3                              da_process();   // 显示值预处理
 179   3                      }
 180   2                      // 模式1对实时采样值进行存储
 181   2                      ad_result = ((int)(ad_result / 2.0 + 64));
 182   2                      ad_save();
 183   2              }
 184   1              else if(mode == 2){     // CH1: 实时采样 CH2: 波形回放显示
 185   2                      ad_result = ((int)(ad_result / 2.0 + 64));      
 186   2              }
 187   1              else if(mode == 3){ // CH1: 实时采样 CH2: 输出0V        
 188   2                      //time_count++;
 189   2                      ad_measure();
 190   2                      /*
 191   2                      if(time_count >= 250){// 0.25ms*400=0.1s更新一次测量值
 192   2                              time_count = 0;
 193   2                              //fre_es = fre_count / 0.15f;  // 输出测量频率
 194   2                              fre_es = 500.0f / (fre_sum * 1.0f / fre_count);
 195   2                              amp_es = 5.0f*((ad_max - ad_min) / 256.0f); // 输出测量幅值
 196   2                              fre_sum = 0; fre_count = 0;
 197   2                              fre_p1 = fre_p2 = 1;
 198   2                              amp_p1 = amp_p2 = 129;
 199   2                              ad_max = ad_min = 128;
 200   2                      }
 201   2                 */
 202   2                      dspbuf_measure();//数码管显示缓存改变
 203   2                      ad_result = ((int)(ad_result / 2.0 + 64));
 204   2              }
 205   1              else if(mode == 4){     // CH1: 实时采样 CH2: 信号发生器，调频调幅
 206   2                      // 信号发生器
 207   2                      da_count++;
 208   2                      if(da_count >= gen_count){ // gen_count = 4时，每隔1ms输出一次D/A
 209   3                              da_count = 0;
 210   3                              da_generator();
 211   3                              da_process();   // 显示值预处理
 212   3                      }       
 213   2              }
 214   1              dsptask();              // 数码管扫描
 215   1              key_service();  // 按键扫描
 216   1              //da_process(); // 显示值预处理
 217   1              //ad_result = ((int)(ad_result / 2.0 + 64)); // 输出预处理
 218   1          da_display();       // D/A显示
 219   1              EA = 1;
*** ERROR C202 IN LINE 219 OF TEST1.C: 'EA': undefined identifier
 220   1      }
 221          void da_process(){      // 处理待显示的D/A输出值
 222   1              da_result = (int)(da_result * 1.0f / da_index + 128.0f -128.0f / da_index); 
 223   1              //da_result = (int)((da_result - 128.0f)*(da_index * 1.0f / 10000.0f) + 128.0f);
 224   1              //da_result = (int)(da_result * 1.0f / da_index + 128.0f -128.0f / da_index);
 225   1      }
 226          void da_display()
 227          {                                                                               
 228   1              switch(mode){
 229   2                      case 1:{         // 模式1 CH1实时显示 CH2信号发生器
 230   3                              DA_CH1 = ad_result;// 实时显示
 231   3                              DA_CH2 = da_result; // 信号发生器
 232   3                      };break;
 233   2                      case 2:{         // 模式2 CH1实时显示 CH2回放显示
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 5   

 234   3                              DA_CH1 = ad_result;// 实时显示
 235   3                              DA_CH2 = ad_memo[review_p++]; // 回放显示
 236   3                              if (review_p >= MEMO_LEN){ // 若显示指针到达存储区末尾，从头开始显示
 237   4                              review_p = 0;
 238   4                              }
 239   3                      };break;
 240   2                      case 3:{        // 模式3 测量模式
 241   3                              DA_CH1 = ad_result;// 实时测量 
 242   3                              DA_CH2 = 128; 
 243   3                      };break;
 244   2                      case 4:{        // 模式4 信号发生器调频、调幅
 245   3                              DA_CH1 = ad_result; // 实时显示
 246   3                              DA_CH2 = da_result; // 信号发生器       
 247   3                      };break;
 248   2                      default: ;break;
 249   2              }
 250   1      }
 251          void da_generator()
 252          {
 253   1              switch(wave_sel){ // 根据wave_sel的选择产生相应波形
 254   2                      case SIN:{      // 正弦波
 255   3                              angle++;
 256   3                              if(angle > 360){
 257   4                                      angle = 0;
 258   4                              }
 259   3                              sinAngle =      sin(((float)angle * PI / 180.0f));// 求角度对应的弧度值[-1,1]
 260   3                              da_result = (int)(((sinAngle + 1.0f) / 2.0f) * 255.0f); // 将[-1,1]内的sin值映射到[0,255]
 261   3                      };break;
 262   2                      case TRI:{      // 三角波
 263   3                              if(tri_flag){//递增
 264   4                                      tri_value++;
 265   4                                      if(tri_value == 255){
 266   5                                              tri_flag = 0;
 267   5                                      }       
 268   4                              }
 269   3                              else{//递减
 270   4                                      tri_value--;
 271   4                                      if(tri_value == 0){
 272   5                                              tri_flag = 1;
 273   5                                      }
 274   4                              }        
 275   3                              da_result = tri_value;  
 276   3                      };break;        
 277   2                      case REC:{      // 方波
 278   3                              rec_count++;
 279   3                              if(rec_count == 200){
 280   4                                      rec_count = 0;                  
 281   4                              }
 282   3                              if(rec_count>100){
 283   4                                      da_result = 255;
 284   4                              }else{
 285   4                                      da_result = 0;
 286   4                              }               
 287   3                      };break;
 288   2                      case SAW:{      // 锯齿波
 289   3                              saw_value++;
 290   3                              if(saw_value > 255){
 291   4                                      saw_value = 0;
 292   4                              }       
 293   3                              da_result = saw_value;
 294   3                      };break;
 295   2                      default:da_result = 128;break;  
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 6   

 296   2              }
 297   1      }
 298          
 299          void dspbuf_measure()   // 将采样得到的频率和幅值显示到数码管上
 300          {
 301   1              // 频率值转换为数码管显示
 302   1              if(flag_fre){
 303   2                      unsigned int integer_fre = 0;
 304   2                      unsigned int fraction_fre = 0;
 305   2                      integer_fre = (int)fre_es;
 306   2                      dspbuf[3] = dspchar[integer_fre % 10];
 307   2                      dspbuf[2] = dspchar[integer_fre / 10 % 10];
 308   2                      dspbuf[1] = dspchar[integer_fre / 100 % 10];
 309   2                      dspbuf[0] = dspchar[integer_fre / 1000 % 10];
 310   2                      /*
 311   2                      if(fre_es >= 100 && fre_es <1000){ // 频率最大为三位数
 312   2                              integer_fre = (int)fre_es;
 313   2                              fraction_fre = (int)(10*(fre_es-integer_fre));  // 显示1位小数
 314   2                              dspbuf[3] = dspchar[fraction_fre];
 315   2                              dspbuf[2] = dspchar[integer_fre % 10] & 0xfe;// 加小数点
 316   2                              dspbuf[1] = dspchar[integer_fre / 10 % 10] ; 
 317   2                              dspbuf[0] = dspchar[integer_fre / 100 % 10];    
 318   2                      }
 319   2                      else if(fre_es >= 1000 && fre_es <10000) //频率为四位数
 320   2                      {
 321   2                              integer_fre = (int)fre_es; 
 322   2                              dspbuf[3] = dspchar[integer_fre % 10];
 323   2                              dspbuf[2] = dspchar[integer_fre / 10 % 10];
 324   2                              dspbuf[1] = dspchar[integer_fre / 100 % 10];    
 325   2                              dspbuf[0] = dspchar[integer_fre / 1000 % 10];
 326   2                      }
 327   2                      else if(fre_es > 0 && fre_es <10){//频率为一位数
 328   2                              integer_fre = (int)fre_es;
 329   2                              fraction_fre = (int)(1000*(fre_es - integer_fre));
 330   2                              dspbuf[0] = dspchar[integer_fre] & 0xfe;//加小数点
 331   2                              dspbuf[3] = dspchar[fraction_fre % 10];
 332   2                              dspbuf[2] = dspchar[fraction_fre / 10 % 10] ; 
 333   2                              dspbuf[1] = dspchar[fraction_fre / 100 % 10];           
 334   2                      }
 335   2                      */
 336   2              }
 337   1              // 幅值转换为数码管显示
 338   1              else if(flag_amp){
 339   2                      if(amp_es >= 0.0f && amp_es <10.0f){
 340   3                              unsigned int integer_amp = 0;
 341   3                              unsigned int fraction_amp = 0;
 342   3                              integer_amp = (int) amp_es;
 343   3                              fraction_amp = (int) ((amp_es-integer_amp)*1000);
 344   3                              dspbuf[0] = dspchar[integer_amp] & 0xfe;// 加小数点
 345   3                              dspbuf[1] = dspchar[fraction_amp / 100 % 10];
 346   3                              dspbuf[2] = dspchar[fraction_amp / 10 % 10];
 347   3                              dspbuf[3] = dspchar[fraction_amp % 10];
 348   3                      }
 349   2              } 
 350   1      }
 351          void ad_measure()       // 频率幅值单次检测
 352          {
 353   1              /*
 354   1              if(ad_result > ad_max + WIN_SIZE / 2){// 测量值超过最大值窗口上界
 355   1                      ad_max = ad_result; // 更新测量最大值
 356   1                      time_count = 1;         // 测量时间计数重新计数
 357   1                      fre_count = 1;          // 最大值采样次数重新计数为1，即当前值
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 7   

 358   1              }
 359   1              else if(ad_result >= ad_max - WIN_SIZE / 2){// 测量值在窗口内
 360   1                      fre_count++;    // 最大值采样技术加1
 361   1              }
 362   1              if(ad_result < ad_min - WIN_SIZE / 2){// 测量值超过最小值窗口下界
 363   1                      ad_min = ad_result; //  更新测量最小值
 364   1              }
 365   1              */
 366   1              // 频率测量
 367   1              amp_p2 = ad_result;
 368   1              time_count++;
 369   1              if(amp_p2 > 128 && amp_p1 <= 128){
 370   2                      fre_p2 = time_count; 
 371   2                      if(fre_p1 != 0){
 372   3                              fre_sum = fre_sum + fabs(fre_p2 - fre_p1);
 373   3                              fre_count++;
 374   3                      }
 375   2                      fre_p1 = fre_p2;        
 376   2              }
 377   1              amp_p1 = amp_p2;
 378   1      
 379   1              // 幅值测量
 380   1              if(ad_result > ad_max){
 381   2                      ad_max = ad_result;
 382   2              }       
 383   1              if(ad_result < ad_min){
 384   2                      ad_min = ad_result;
 385   2              }
 386   1              if(time_count >= AD_LEN){
 387   2                      fre_es = 1500.0f / (fre_sum * 1.0f / fre_count);
 388   2                      amp_es = 5.0f * ((ad_max-ad_min)/256.0f);
 389   2                      fre_sum = 0;fre_count = 0;
 390   2                      time_count = 0;
 391   2                      fre_p1 = fre_p2 = 0;
 392   2                      amp_p1 = amp_p2 = 129;
 393   2                      ad_max = ad_min = 128;
 394   2              }
 395   1              /*
 396   1                      if(time_count >= 250){// 0.25ms*400=0.1s更新一次测量值
 397   1                              time_count = 0;
 398   1                              //fre_es = fre_count / 0.15f;  // 输出测量频率
 399   1                              fre_es = 500.0f / (fre_sum * 1.0f / fre_count);
 400   1                              amp_es = 5.0f*((ad_max - ad_min) / 256.0f); // 输出测量幅值
 401   1                              fre_sum = 0; fre_count = 0;
 402   1                              fre_p1 = fre_p2 = 1;
 403   1                              amp_p1 = amp_p2 = 129;
 404   1                              ad_max = ad_min = 128;
 405   1                      }
 406   1                 */   
 407   1      
 408   1      }
 409          
 410          void mode_select()      // 模式选择
 411          {
 412   1              switch(key_num){
 413   2                      case 1:{                // 模式1：实时采样+存储，信号发生器
 414   3                              mode = 1;
 415   3                              fdisp(1,0); // 数码管最左端显示模式1
 416   3                              fdisp(0,1);
 417   3                              fdisp(0,2);
 418   3                              fdisp(wave_sel,3);
 419   3                      };break;
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 8   

 420   2                      case 2:{                // 模式2：实时采样，波形回放
 421   3                              mode = 2;
 422   3                              fdisp(2,0);     // 数码管最左端显示模式2
 423   3                              fdisp(0,1);
 424   3                              fdisp(0,2);
 425   3                              fdisp(0,3);     // 数码管最右端波形显示清零     
 426   3                      };break;
 427   2                      case 3:{                // 模式3：测量实时采样的幅值和频率（或周期）
 428   3                              mode = 3;
 429   3                              fdisp(3,0);
 430   3                              fdisp(0,1);
 431   3                              fdisp(0,2);
 432   3                              fdisp(0,3);
 433   3                      };break;
 434   2                      case 4:{                // 信号发生器调频调幅
 435   3                              mode = 4;                       
 436   3                              fdisp(4,0);               // 数码管最左端显示模式4
 437   3                              fdisp(0,1);
 438   3                              fdisp(0,2);
 439   3                              fdisp(wave_sel,3);// 数码管最右端显示波形       
 440   3                      };break;
 441   2                      case 5:{
 442   3                              if(mode == 1){                  // 模式1下，按键5表示选择正弦波
 443   4                                      wave_sel = SIN;
 444   4                                      fdisp(wave_sel,3);      // 在数码管最右端显示波形选择
 445   4                              }
 446   3                              else if(mode == 2){;}
 447   3                              else if(mode == 3){             // 模式3下，按键5显示测量频率
 448   4                                      flag_amp = 0;                                                                                                                            
 449   4                                      flag_fre = 1;
 450   4                              }
 451   3                              else if(mode == 4){             // 模式4下，按键5表示频率1
 452   4                                      /*if(gen_count >= 50000){
 453   4                                              gen_count = 50000;
 454   4                                      }
 455   4                                      else{
 456   4                                              gen_count++;
 457   4                                      }
 458   4                                      */
 459   4                                      if(fre_modi){
 460   5                                              gen_count = 4;
 461   5                                      }
 462   4                                      if(amp_modi){
 463   5                                              da_index = 2;
 464   5                                      }
 465   4                                      //gen_count = 4;
 466   4                                      //da_index = 2;
 467   4                              }
 468   3                      };break;
 469   2                      case 6:{
 470   3                              if(mode == 1){                  // 模式1下，按键5表示选择三角波
 471   4                                      wave_sel = TRI;
 472   4                                      fdisp(wave_sel,3);
 473   4                              }
 474   3                              else if(mode == 3){             // 模式3下，按键6表示测量幅值
 475   4                                      flag_fre = 0;
 476   4                                      flag_amp = 1;           
 477   4                              } 
 478   3                              else if(mode == 4){             // 模式4下，按键6表示频率2
 479   4                                      /*
 480   4                                      if(gen_count <= 4){
 481   4                                              gen_count = 4;
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 9   

 482   4                                      }else{
 483   4                                              gen_count--;
 484   4                                      }
 485   4                                      */
 486   4                                      if(fre_modi){
 487   5                                              gen_count = 3;
 488   5                                      }
 489   4                                      if(amp_modi){
 490   5                                              da_index = 3;
 491   5                                      }
 492   4                              }       
 493   3                      };break;
 494   2                      case 7:{
 495   3                              if(mode == 1){                  // 模式1下，按键7表示选择方波
 496   4                                      wave_sel = REC;         
 497   4                                      fdisp(wave_sel,3);      
 498   4                              }
 499   3                              else if(mode == 3){
 500   4                                      fre_modi = 1;
 501   4                                      amp_modi = 0;
 502   4                              }
 503   3                              else if(mode == 4){             // 模式4下，按键7表示幅度减小,频率3
 504   4                                      /*
 505   4                                      if(da_index <= 1000){
 506   4                                              da_index = 1000;
 507   4                                      }
 508   4                                      else{
 509   4                                              da_index--;
 510   4                                      }
 511   4                                      */
 512   4                                      if(fre_modi){
 513   5                                              gen_count = 2;
 514   5                                      }
 515   4                                      if(amp_modi){
 516   5                                              da_index = 4;
 517   5                                      }
 518   4                              }
 519   3                      };break;
 520   2                      case 8:{                                        
 521   3                              if(mode == 1){                  // 模式1下，按键8表示选择锯齿波
 522   4                                      wave_sel = SAW;
 523   4                                      fdisp(wave_sel,3);
 524   4                              }
 525   3                              else if(mode == 3){
 526   4                                      fre_modi = 0;
 527   4                                      amp_modi = 1;
 528   4                              }
 529   3                              else if(mode == 4){             // 模式4下，按键8表示幅度增大,频率4
 530   4                                      /*
 531   4                                      if(da_index >= 5000){
 532   4                                              da_index = 5000;
 533   4                                      }
 534   4                                      else{
 535   4                                              da_index++;
 536   4                                      }
 537   4                                      */
 538   4                                      if(fre_modi){
 539   5                                              gen_count = 1;
 540   5                                      }
 541   4                                      if(amp_modi){
 542   5                                              da_index = 5;
 543   5                                      }
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 10  

 544   4                              }
 545   3                      }; break;
 546   2                      default:break;
 547   2              }
 548   1              
 549   1      }
 550          /*
 551          unsigned char amp = 128;
 552          unsigned char amp_up = 128, amp_low =128;
 553          float adamp = 0.0f;
 554          unsigned int num = 0;
 555          void amp_measure() // 幅值测量
 556          {
 557              //int i = 0;
 558              amp = ad_result;
 559              memo_p++;
 560              if (amp > amp_up)
 561              {
 562                  amp_up = amp;
 563              }
 564              if (amp < amp_low)
 565              {
 566                  amp_low = amp;
 567              }
 568              if (memo_p >= MEMO_LEN)
 569              {
 570                  adamp = (amp_up * 5.0 - amp_low * 5.0) / 256;
 571                  memo_p = 0;
 572                  amp_up = amp_low = 128;
 573              }
 574          
 575              num =(int)adamp*1000;
 576                  fdisp(num%10,0);
 577                  fdisp(num/10%10,1);
 578                  fdisp(num/100%10,2);
 579                  fdisp(num/1000%10,3);
 580          }
 581          */
 582          
 583          void key_service()
 584          {
 585   1              if(key_sta & 0x01) return;//key_sta.0 = 1，按键为按下状态
 586   1              // key_sta.0 = 0，按键为弹起状态，检测到KEY1/KEY2行有按键被按下
 587   1              if(KEY1){
*** ERROR C202 IN LINE 587 OF TEST1.C: 'KEY1': undefined identifier
 588   2                      key_num = key_col + 1; 
 589   2                      key_sta = key_sta | 0x01;//key_sta.0 = 1
 590   2              }       
 591   1              else if(KEY2){
*** ERROR C202 IN LINE 591 OF TEST1.C: 'KEY2': undefined identifier
 592   2                      key_num = key_col + 5;
 593   2                      key_sta = key_sta | 0x01;//key_sta.0 = 1        
 594   2              }
 595   1              
 596   1      }
 597          /*
 598          void ad_delay()
 599          {
 600              _nop_();
 601              _nop_();
 602              _nop_();
 603              _nop_();
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 11  

 604          }
 605          */
 606          /*
 607          void ad_get()
 608          {
 609              ADC_RES = 0;       // ADC存储缓存清零
 610              ADC_CONTR |= 0x08; // ADCSTART = 1
 611              ad_delay();        // 必要的4个nop
 612              while (ADC_CONTR & 0x10 == 0)
 613                  ;                // ADC_FLAG = 0,等待ADC_FLAG = 1
 614              ADC_CONTR &= 0xE7;   // 上述两位清零等待下次采样
 615              ad_result = ADC_RES; // 保存采样值
 616          }
 617          */
 618          
 619          void ad_save() // A/D采样值存储
 620          {
 621   1          ad_memo[memo_p++] = ad_result;
 622   1          if (memo_p >= MEMO_LEN)
 623   1          {
 624   2              memo_p = 0;
 625   2          }
 626   1      }
 627          
 628          void dsptask()
 629          {
 630   1          unsigned char i;    // for loop 临时变量
 631   1          unsigned char a, b; // a:数码管位选，b:掩码
 632   1      
 633   1          // 数码管位选
 634   1          switch (sel)
 635   1          {
 636   2          case 0:        // L1-T204
 637   2              a = 0x01;
 638   2              break; 
 639   2          case 1:        // L2-T203
 640   2              a = 0x02;  
 641   2              break; 
 642   2          case 2:        // L3-T202
 643   2              a = 0x04;
 644   2              break;          
 645   2          default:   // L4-T201
 646   2              a = 0x08; 
 647   2          }
 648   1              // 将表示数码管位选的信息输入到74HC565的高位8bit 
 649   1              // 对应数码管的COM1为高电平（共阳极数码管）
 650   1          for (b = 0x80, i = 0; i < 8; i++)
 651   1          {
 652   2              if (a & b)
 653   2                  D_SER = 1;
*** ERROR C202 IN LINE 653 OF TEST1.C: 'D_SER': undefined identifier
 654   2              else
 655   2                  D_SER = 0;
*** ERROR C202 IN LINE 655 OF TEST1.C: 'D_SER': undefined identifier
 656   2              D_SRCLK = 0;
*** ERROR C202 IN LINE 656 OF TEST1.C: 'D_SRCLK': undefined identifier
 657   2              D_SRCLK = 1;
*** ERROR C202 IN LINE 657 OF TEST1.C: 'D_SRCLK': undefined identifier
 658   2              D_SRCLK = 0;
*** ERROR C202 IN LINE 658 OF TEST1.C: 'D_SRCLK': undefined identifier
 659   2              b = b >> 1;
 660   2              // b=b&0x7f;
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 12  

 661   2          }
 662   1          // 载入位选数码管对应的显示内容
 663   1          a = dspbuf[sel];
 664   1              // 按键列选择
 665   1              key_col = sel;
 666   1              // 索引改变，选择下一个数码管
 667   1          sel++;
 668   1          if (sel >= 4)
 669   1              sel = 0; 
 670   1              // 将数码管对应显示内容输入到级联74HC565的低8bit
 671   1          for (b = 0x80, i = 0; i < 8; i++)
 672   1          {
 673   2              if (a & b)
 674   2                  D_SER = 1;
*** ERROR C202 IN LINE 674 OF TEST1.C: 'D_SER': undefined identifier
 675   2              else
 676   2                  D_SER = 0;
*** ERROR C202 IN LINE 676 OF TEST1.C: 'D_SER': undefined identifier
 677   2              D_SRCLK = 0;
*** ERROR C202 IN LINE 677 OF TEST1.C: 'D_SRCLK': undefined identifier
 678   2              D_SRCLK = 1;
*** ERROR C202 IN LINE 678 OF TEST1.C: 'D_SRCLK': undefined identifier
 679   2              D_SRCLK = 0;
*** ERROR C202 IN LINE 679 OF TEST1.C: 'D_SRCLK': undefined identifier
 680   2              b = b >> 1;
 681   2              // b=b&0x7fff;
 682   2          }
 683   1          D_RCLK = 0;
*** ERROR C202 IN LINE 683 OF TEST1.C: 'D_RCLK': undefined identifier
 684   1          D_RCLK = 1;
*** ERROR C202 IN LINE 684 OF TEST1.C: 'D_RCLK': undefined identifier
 685   1          D_RCLK = 0;
*** ERROR C202 IN LINE 685 OF TEST1.C: 'D_RCLK': undefined identifier
 686   1      }
 687          void fdisp(unsigned char n,unsigned char m)
 688          {
 689   1              char c;
 690   1              switch(n){
 691   2                      case 0: c = 0x11; break;
 692   2                      case 1: c = 0x7d; break;
 693   2                      case 2: c = 0x23; break;
 694   2                      case 3: c = 0x29; break;
 695   2                      case 4: c = 0x4d; break;
 696   2                      case 5: c = 0x89; break;
 697   2                      case 6: c = 0x81; break;
 698   2                      case 7: c = 0x3d; break;
 699   2                      case 8: c = 0x01; break;
 700   2                      case 9: c = 0x09; break;
 701   2                      default:c = 0xff; break;
 702   2              }
 703   1              dspbuf[m] = c;
 704   1      }
 705          unsigned char GetADC()
 706          {
 707   1          ADC_CONTR = ADC_CONTR | ADC_POWER | 3 | ADC_START;
*** ERROR C202 IN LINE 707 OF TEST1.C: 'ADC_CONTR': undefined identifier
 708   1          _nop_(); // wait
 709   1          _nop_();
 710   1          _nop_();
 711   1          _nop_();
 712   1          while (!(ADC_CONTR & ADC_FLAG))
*** ERROR C202 IN LINE 712 OF TEST1.C: 'ADC_CONTR': undefined identifier
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 13  

 713   1              ;                   // 等待A/D标志位变1，ADC_FLAG
 714   1          ADC_CONTR &= ~ADC_FLAG; // 标志位清零
*** ERROR C202 IN LINE 714 OF TEST1.C: 'ADC_CONTR': undefined identifier
 715   1          return ADC_RES;
*** ERROR C202 IN LINE 715 OF TEST1.C: 'ADC_RES': undefined identifier
 716   1      }
 717          
 718          
 719          void init_ad() // ad寄存器初始化
 720          {
 721   1          P1ASF = 0x08;     // P1.3作为ad输入
*** ERROR C202 IN LINE 721 OF TEST1.C: 'P1ASF': undefined identifier
 722   1          ADC_CONTR = 0xE3; // ADC控制寄存器         Bit7    Bit6    Bit5    Bit4    Bit3    Bit2    Bit1    Bit
             -0
*** ERROR C202 IN LINE 722 OF TEST1.C: 'ADC_CONTR': undefined identifier
 723   1                            // 位描述            ADC_POWER  SPEED1 SPEED0 ADC_FLAG ADC_START CHS2    CHS1    CHS
             -0
 724   1                            // 初始值=0000,0000      0       0       0       0       0       0       0       0
 725   1                            // 设置值=0000,0000      1       1       1       0       0       0       1       1
 726   1          AUXR1 &= 0xfb;    // 高8位存储在在ADC_RES
*** ERROR C202 IN LINE 726 OF TEST1.C: 'AUXR1': undefined identifier
 727   1          CLK_DIV = 0x01;   // 系统时钟/2
*** ERROR C202 IN LINE 727 OF TEST1.C: 'CLK_DIV': undefined identifier
 728   1      }
 729          void init_special_interrupts() // 中断初始化
 730          {
 731   1          EX0 = 0;
*** ERROR C202 IN LINE 731 OF TEST1.C: 'EX0': undefined identifier
 732   1          ET0 = 1; // 定时器0中断
*** ERROR C202 IN LINE 732 OF TEST1.C: 'ET0': undefined identifier
 733   1          EX1 = 0;
*** ERROR C202 IN LINE 733 OF TEST1.C: 'EX1': undefined identifier
 734   1          ET1 = 1; // 定时器1中断
*** ERROR C202 IN LINE 734 OF TEST1.C: 'ET1': undefined identifier
 735   1          ES = 1;
*** ERROR C202 IN LINE 735 OF TEST1.C: 'ES': undefined identifier
 736   1          EA = 1; // 总中断
*** ERROR C202 IN LINE 736 OF TEST1.C: 'EA': undefined identifier
 737   1          PT0 = 0;
*** ERROR C202 IN LINE 737 OF TEST1.C: 'PT0': undefined identifier
 738   1          PX1 = 1;
*** ERROR C202 IN LINE 738 OF TEST1.C: 'PX1': undefined identifier
 739   1          PS = 0;
*** ERROR C202 IN LINE 739 OF TEST1.C: 'PS': undefined identifier
 740   1      }
 741          void init_timer0() // 定时器0初始化
 742          {                  // 1/4ms
 743   1          TMOD &= 0XF0;  // Timer0设置清除
*** ERROR C202 IN LINE 743 OF TEST1.C: 'TMOD': undefined identifier
 744   1          TMOD |= 0X02;  // 8位自动重载
*** ERROR C202 IN LINE 744 OF TEST1.C: 'TMOD': undefined identifier
 745   1          TL0 = 0X06;
*** ERROR C202 IN LINE 745 OF TEST1.C: 'TL0': undefined identifier
 746   1          TH0 = 0X06;
*** ERROR C202 IN LINE 746 OF TEST1.C: 'TH0': undefined identifier
 747   1          TR0 = 1;
*** ERROR C202 IN LINE 747 OF TEST1.C: 'TR0': undefined identifier
 748   1          ET0 = 1;
*** ERROR C202 IN LINE 748 OF TEST1.C: 'ET0': undefined identifier
 749   1      }
 750          
 751          
C51 COMPILER V9.01   TEST1                                                                 04/27/2023 15:56:58 PAGE 14  

 752          

C51 COMPILATION COMPLETE.  1 WARNING(S),  45 ERROR(S)
